// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateRide {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createRide(data: RideCreateInput!): Ride!
  updateRide(data: RideUpdateInput!, where: RideWhereUniqueInput!): Ride
  updateManyRides(data: RideUpdateManyMutationInput!, where: RideWhereInput): BatchPayload!
  upsertRide(where: RideWhereUniqueInput!, create: RideCreateInput!, update: RideUpdateInput!): Ride!
  deleteRide(where: RideWhereUniqueInput!): Ride
  deleteManyRides(where: RideWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  ride(where: RideWhereUniqueInput!): Ride
  rides(where: RideWhereInput, orderBy: RideOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ride]!
  ridesConnection(where: RideWhereInput, orderBy: RideOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RideConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Ride {
  id: ID!
  riders: Int!
  pickUp: String!
  dropOff: String!
  price: Int!
  status: RideStatus!
}

type RideConnection {
  pageInfo: PageInfo!
  edges: [RideEdge]!
  aggregate: AggregateRide!
}

input RideCreateInput {
  id: ID
  riders: Int!
  pickUp: String!
  dropOff: String!
  price: Int!
  status: RideStatus!
}

input RideCreateManyInput {
  create: [RideCreateInput!]
  connect: [RideWhereUniqueInput!]
}

type RideEdge {
  node: Ride!
  cursor: String!
}

enum RideOrderByInput {
  id_ASC
  id_DESC
  riders_ASC
  riders_DESC
  pickUp_ASC
  pickUp_DESC
  dropOff_ASC
  dropOff_DESC
  price_ASC
  price_DESC
  status_ASC
  status_DESC
}

type RidePreviousValues {
  id: ID!
  riders: Int!
  pickUp: String!
  dropOff: String!
  price: Int!
  status: RideStatus!
}

input RideScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  riders: Int
  riders_not: Int
  riders_in: [Int!]
  riders_not_in: [Int!]
  riders_lt: Int
  riders_lte: Int
  riders_gt: Int
  riders_gte: Int
  pickUp: String
  pickUp_not: String
  pickUp_in: [String!]
  pickUp_not_in: [String!]
  pickUp_lt: String
  pickUp_lte: String
  pickUp_gt: String
  pickUp_gte: String
  pickUp_contains: String
  pickUp_not_contains: String
  pickUp_starts_with: String
  pickUp_not_starts_with: String
  pickUp_ends_with: String
  pickUp_not_ends_with: String
  dropOff: String
  dropOff_not: String
  dropOff_in: [String!]
  dropOff_not_in: [String!]
  dropOff_lt: String
  dropOff_lte: String
  dropOff_gt: String
  dropOff_gte: String
  dropOff_contains: String
  dropOff_not_contains: String
  dropOff_starts_with: String
  dropOff_not_starts_with: String
  dropOff_ends_with: String
  dropOff_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  status: RideStatus
  status_not: RideStatus
  status_in: [RideStatus!]
  status_not_in: [RideStatus!]
  AND: [RideScalarWhereInput!]
  OR: [RideScalarWhereInput!]
  NOT: [RideScalarWhereInput!]
}

enum RideStatus {
  REQUESTED
  ACCEPTED
  RIDING
  DECLINED
  CANCELLED
}

type RideSubscriptionPayload {
  mutation: MutationType!
  node: Ride
  updatedFields: [String!]
  previousValues: RidePreviousValues
}

input RideSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RideWhereInput
  AND: [RideSubscriptionWhereInput!]
  OR: [RideSubscriptionWhereInput!]
  NOT: [RideSubscriptionWhereInput!]
}

input RideUpdateDataInput {
  riders: Int
  pickUp: String
  dropOff: String
  price: Int
  status: RideStatus
}

input RideUpdateInput {
  riders: Int
  pickUp: String
  dropOff: String
  price: Int
  status: RideStatus
}

input RideUpdateManyDataInput {
  riders: Int
  pickUp: String
  dropOff: String
  price: Int
  status: RideStatus
}

input RideUpdateManyInput {
  create: [RideCreateInput!]
  update: [RideUpdateWithWhereUniqueNestedInput!]
  upsert: [RideUpsertWithWhereUniqueNestedInput!]
  delete: [RideWhereUniqueInput!]
  connect: [RideWhereUniqueInput!]
  set: [RideWhereUniqueInput!]
  disconnect: [RideWhereUniqueInput!]
  deleteMany: [RideScalarWhereInput!]
  updateMany: [RideUpdateManyWithWhereNestedInput!]
}

input RideUpdateManyMutationInput {
  riders: Int
  pickUp: String
  dropOff: String
  price: Int
  status: RideStatus
}

input RideUpdateManyWithWhereNestedInput {
  where: RideScalarWhereInput!
  data: RideUpdateManyDataInput!
}

input RideUpdateWithWhereUniqueNestedInput {
  where: RideWhereUniqueInput!
  data: RideUpdateDataInput!
}

input RideUpsertWithWhereUniqueNestedInput {
  where: RideWhereUniqueInput!
  update: RideUpdateDataInput!
  create: RideCreateInput!
}

input RideWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  riders: Int
  riders_not: Int
  riders_in: [Int!]
  riders_not_in: [Int!]
  riders_lt: Int
  riders_lte: Int
  riders_gt: Int
  riders_gte: Int
  pickUp: String
  pickUp_not: String
  pickUp_in: [String!]
  pickUp_not_in: [String!]
  pickUp_lt: String
  pickUp_lte: String
  pickUp_gt: String
  pickUp_gte: String
  pickUp_contains: String
  pickUp_not_contains: String
  pickUp_starts_with: String
  pickUp_not_starts_with: String
  pickUp_ends_with: String
  pickUp_not_ends_with: String
  dropOff: String
  dropOff_not: String
  dropOff_in: [String!]
  dropOff_not_in: [String!]
  dropOff_lt: String
  dropOff_lte: String
  dropOff_gt: String
  dropOff_gte: String
  dropOff_contains: String
  dropOff_not_contains: String
  dropOff_starts_with: String
  dropOff_not_starts_with: String
  dropOff_ends_with: String
  dropOff_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  status: RideStatus
  status_not: RideStatus
  status_in: [RideStatus!]
  status_not_in: [RideStatus!]
  AND: [RideWhereInput!]
  OR: [RideWhereInput!]
  NOT: [RideWhereInput!]
}

input RideWhereUniqueInput {
  id: ID
}

enum Role {
  ADMIN
  DRIVER
  PASSANGER
}

type Subscription {
  ride(where: RideSubscriptionWhereInput): RideSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  cell: String!
  email: String!
  image: String
  name: String!
  password: String!
  oneTimePin: String
  oneTimePinExpiry: DateTime
  rides(where: RideWhereInput, orderBy: RideOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ride!]
  roles: [Role!]!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  cell: String!
  email: String!
  image: String
  name: String!
  password: String!
  oneTimePin: String
  oneTimePinExpiry: DateTime
  rides: RideCreateManyInput
  roles: UserCreaterolesInput
}

input UserCreaterolesInput {
  set: [Role!]
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  cell_ASC
  cell_DESC
  email_ASC
  email_DESC
  image_ASC
  image_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  oneTimePin_ASC
  oneTimePin_DESC
  oneTimePinExpiry_ASC
  oneTimePinExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  cell: String!
  email: String!
  image: String
  name: String!
  password: String!
  oneTimePin: String
  oneTimePinExpiry: DateTime
  roles: [Role!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  cell: String
  email: String
  image: String
  name: String
  password: String
  oneTimePin: String
  oneTimePinExpiry: DateTime
  rides: RideUpdateManyInput
  roles: UserUpdaterolesInput
}

input UserUpdateManyMutationInput {
  cell: String
  email: String
  image: String
  name: String
  password: String
  oneTimePin: String
  oneTimePinExpiry: DateTime
  roles: UserUpdaterolesInput
}

input UserUpdaterolesInput {
  set: [Role!]
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  cell: String
  cell_not: String
  cell_in: [String!]
  cell_not_in: [String!]
  cell_lt: String
  cell_lte: String
  cell_gt: String
  cell_gte: String
  cell_contains: String
  cell_not_contains: String
  cell_starts_with: String
  cell_not_starts_with: String
  cell_ends_with: String
  cell_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  oneTimePin: String
  oneTimePin_not: String
  oneTimePin_in: [String!]
  oneTimePin_not_in: [String!]
  oneTimePin_lt: String
  oneTimePin_lte: String
  oneTimePin_gt: String
  oneTimePin_gte: String
  oneTimePin_contains: String
  oneTimePin_not_contains: String
  oneTimePin_starts_with: String
  oneTimePin_not_starts_with: String
  oneTimePin_ends_with: String
  oneTimePin_not_ends_with: String
  oneTimePinExpiry: DateTime
  oneTimePinExpiry_not: DateTime
  oneTimePinExpiry_in: [DateTime!]
  oneTimePinExpiry_not_in: [DateTime!]
  oneTimePinExpiry_lt: DateTime
  oneTimePinExpiry_lte: DateTime
  oneTimePinExpiry_gt: DateTime
  oneTimePinExpiry_gte: DateTime
  rides_every: RideWhereInput
  rides_some: RideWhereInput
  rides_none: RideWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`