// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  ride: (where?: RideWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  ride: (where: RideWhereUniqueInput) => RideNullablePromise;
  rides: (args?: {
    where?: RideWhereInput;
    orderBy?: RideOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Ride>;
  ridesConnection: (args?: {
    where?: RideWhereInput;
    orderBy?: RideOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RideConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createRide: (data: RideCreateInput) => RidePromise;
  updateRide: (args: {
    data: RideUpdateInput;
    where: RideWhereUniqueInput;
  }) => RidePromise;
  updateManyRides: (args: {
    data: RideUpdateManyMutationInput;
    where?: RideWhereInput;
  }) => BatchPayloadPromise;
  upsertRide: (args: {
    where: RideWhereUniqueInput;
    create: RideCreateInput;
    update: RideUpdateInput;
  }) => RidePromise;
  deleteRide: (where: RideWhereUniqueInput) => RidePromise;
  deleteManyRides: (where?: RideWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  ride: (
    where?: RideSubscriptionWhereInput
  ) => RideSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type RideStatus =
  | "REQUESTED"
  | "ACCEPTED"
  | "RIDING"
  | "DECLINED"
  | "CANCELLED";

export type RideOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "riders_ASC"
  | "riders_DESC"
  | "pickUp_ASC"
  | "pickUp_DESC"
  | "dropOff_ASC"
  | "dropOff_DESC"
  | "price_ASC"
  | "price_DESC"
  | "status_ASC"
  | "status_DESC";

export type Role = "ADMIN" | "DRIVER" | "PASSANGER";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "cell_ASC"
  | "cell_DESC"
  | "email_ASC"
  | "email_DESC"
  | "image_ASC"
  | "image_DESC"
  | "name_ASC"
  | "name_DESC"
  | "password_ASC"
  | "password_DESC"
  | "oneTimePin_ASC"
  | "oneTimePin_DESC"
  | "oneTimePinExpiry_ASC"
  | "oneTimePinExpiry_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type RideWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RideWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  riders?: Maybe<Int>;
  riders_not?: Maybe<Int>;
  riders_in?: Maybe<Int[] | Int>;
  riders_not_in?: Maybe<Int[] | Int>;
  riders_lt?: Maybe<Int>;
  riders_lte?: Maybe<Int>;
  riders_gt?: Maybe<Int>;
  riders_gte?: Maybe<Int>;
  pickUp?: Maybe<String>;
  pickUp_not?: Maybe<String>;
  pickUp_in?: Maybe<String[] | String>;
  pickUp_not_in?: Maybe<String[] | String>;
  pickUp_lt?: Maybe<String>;
  pickUp_lte?: Maybe<String>;
  pickUp_gt?: Maybe<String>;
  pickUp_gte?: Maybe<String>;
  pickUp_contains?: Maybe<String>;
  pickUp_not_contains?: Maybe<String>;
  pickUp_starts_with?: Maybe<String>;
  pickUp_not_starts_with?: Maybe<String>;
  pickUp_ends_with?: Maybe<String>;
  pickUp_not_ends_with?: Maybe<String>;
  dropOff?: Maybe<String>;
  dropOff_not?: Maybe<String>;
  dropOff_in?: Maybe<String[] | String>;
  dropOff_not_in?: Maybe<String[] | String>;
  dropOff_lt?: Maybe<String>;
  dropOff_lte?: Maybe<String>;
  dropOff_gt?: Maybe<String>;
  dropOff_gte?: Maybe<String>;
  dropOff_contains?: Maybe<String>;
  dropOff_not_contains?: Maybe<String>;
  dropOff_starts_with?: Maybe<String>;
  dropOff_not_starts_with?: Maybe<String>;
  dropOff_ends_with?: Maybe<String>;
  dropOff_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  status?: Maybe<RideStatus>;
  status_not?: Maybe<RideStatus>;
  status_in?: Maybe<RideStatus[] | RideStatus>;
  status_not_in?: Maybe<RideStatus[] | RideStatus>;
  AND?: Maybe<RideWhereInput[] | RideWhereInput>;
  OR?: Maybe<RideWhereInput[] | RideWhereInput>;
  NOT?: Maybe<RideWhereInput[] | RideWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  cell?: Maybe<String>;
  cell_not?: Maybe<String>;
  cell_in?: Maybe<String[] | String>;
  cell_not_in?: Maybe<String[] | String>;
  cell_lt?: Maybe<String>;
  cell_lte?: Maybe<String>;
  cell_gt?: Maybe<String>;
  cell_gte?: Maybe<String>;
  cell_contains?: Maybe<String>;
  cell_not_contains?: Maybe<String>;
  cell_starts_with?: Maybe<String>;
  cell_not_starts_with?: Maybe<String>;
  cell_ends_with?: Maybe<String>;
  cell_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  oneTimePin?: Maybe<String>;
  oneTimePin_not?: Maybe<String>;
  oneTimePin_in?: Maybe<String[] | String>;
  oneTimePin_not_in?: Maybe<String[] | String>;
  oneTimePin_lt?: Maybe<String>;
  oneTimePin_lte?: Maybe<String>;
  oneTimePin_gt?: Maybe<String>;
  oneTimePin_gte?: Maybe<String>;
  oneTimePin_contains?: Maybe<String>;
  oneTimePin_not_contains?: Maybe<String>;
  oneTimePin_starts_with?: Maybe<String>;
  oneTimePin_not_starts_with?: Maybe<String>;
  oneTimePin_ends_with?: Maybe<String>;
  oneTimePin_not_ends_with?: Maybe<String>;
  oneTimePinExpiry?: Maybe<DateTimeInput>;
  oneTimePinExpiry_not?: Maybe<DateTimeInput>;
  oneTimePinExpiry_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  oneTimePinExpiry_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  oneTimePinExpiry_lt?: Maybe<DateTimeInput>;
  oneTimePinExpiry_lte?: Maybe<DateTimeInput>;
  oneTimePinExpiry_gt?: Maybe<DateTimeInput>;
  oneTimePinExpiry_gte?: Maybe<DateTimeInput>;
  rides_every?: Maybe<RideWhereInput>;
  rides_some?: Maybe<RideWhereInput>;
  rides_none?: Maybe<RideWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface RideCreateInput {
  id?: Maybe<ID_Input>;
  riders: Int;
  pickUp: String;
  dropOff: String;
  price: Int;
  status: RideStatus;
}

export interface RideUpdateInput {
  riders?: Maybe<Int>;
  pickUp?: Maybe<String>;
  dropOff?: Maybe<String>;
  price?: Maybe<Int>;
  status?: Maybe<RideStatus>;
}

export interface RideUpdateManyMutationInput {
  riders?: Maybe<Int>;
  pickUp?: Maybe<String>;
  dropOff?: Maybe<String>;
  price?: Maybe<Int>;
  status?: Maybe<RideStatus>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  cell: String;
  email: String;
  image?: Maybe<String>;
  name: String;
  password: String;
  oneTimePin?: Maybe<String>;
  oneTimePinExpiry?: Maybe<DateTimeInput>;
  rides?: Maybe<RideCreateManyInput>;
  roles?: Maybe<UserCreaterolesInput>;
}

export interface RideCreateManyInput {
  create?: Maybe<RideCreateInput[] | RideCreateInput>;
  connect?: Maybe<RideWhereUniqueInput[] | RideWhereUniqueInput>;
}

export interface UserCreaterolesInput {
  set?: Maybe<Role[] | Role>;
}

export interface UserUpdateInput {
  cell?: Maybe<String>;
  email?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  oneTimePin?: Maybe<String>;
  oneTimePinExpiry?: Maybe<DateTimeInput>;
  rides?: Maybe<RideUpdateManyInput>;
  roles?: Maybe<UserUpdaterolesInput>;
}

export interface RideUpdateManyInput {
  create?: Maybe<RideCreateInput[] | RideCreateInput>;
  update?: Maybe<
    | RideUpdateWithWhereUniqueNestedInput[]
    | RideUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | RideUpsertWithWhereUniqueNestedInput[]
    | RideUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<RideWhereUniqueInput[] | RideWhereUniqueInput>;
  connect?: Maybe<RideWhereUniqueInput[] | RideWhereUniqueInput>;
  set?: Maybe<RideWhereUniqueInput[] | RideWhereUniqueInput>;
  disconnect?: Maybe<RideWhereUniqueInput[] | RideWhereUniqueInput>;
  deleteMany?: Maybe<RideScalarWhereInput[] | RideScalarWhereInput>;
  updateMany?: Maybe<
    RideUpdateManyWithWhereNestedInput[] | RideUpdateManyWithWhereNestedInput
  >;
}

export interface RideUpdateWithWhereUniqueNestedInput {
  where: RideWhereUniqueInput;
  data: RideUpdateDataInput;
}

export interface RideUpdateDataInput {
  riders?: Maybe<Int>;
  pickUp?: Maybe<String>;
  dropOff?: Maybe<String>;
  price?: Maybe<Int>;
  status?: Maybe<RideStatus>;
}

export interface RideUpsertWithWhereUniqueNestedInput {
  where: RideWhereUniqueInput;
  update: RideUpdateDataInput;
  create: RideCreateInput;
}

export interface RideScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  riders?: Maybe<Int>;
  riders_not?: Maybe<Int>;
  riders_in?: Maybe<Int[] | Int>;
  riders_not_in?: Maybe<Int[] | Int>;
  riders_lt?: Maybe<Int>;
  riders_lte?: Maybe<Int>;
  riders_gt?: Maybe<Int>;
  riders_gte?: Maybe<Int>;
  pickUp?: Maybe<String>;
  pickUp_not?: Maybe<String>;
  pickUp_in?: Maybe<String[] | String>;
  pickUp_not_in?: Maybe<String[] | String>;
  pickUp_lt?: Maybe<String>;
  pickUp_lte?: Maybe<String>;
  pickUp_gt?: Maybe<String>;
  pickUp_gte?: Maybe<String>;
  pickUp_contains?: Maybe<String>;
  pickUp_not_contains?: Maybe<String>;
  pickUp_starts_with?: Maybe<String>;
  pickUp_not_starts_with?: Maybe<String>;
  pickUp_ends_with?: Maybe<String>;
  pickUp_not_ends_with?: Maybe<String>;
  dropOff?: Maybe<String>;
  dropOff_not?: Maybe<String>;
  dropOff_in?: Maybe<String[] | String>;
  dropOff_not_in?: Maybe<String[] | String>;
  dropOff_lt?: Maybe<String>;
  dropOff_lte?: Maybe<String>;
  dropOff_gt?: Maybe<String>;
  dropOff_gte?: Maybe<String>;
  dropOff_contains?: Maybe<String>;
  dropOff_not_contains?: Maybe<String>;
  dropOff_starts_with?: Maybe<String>;
  dropOff_not_starts_with?: Maybe<String>;
  dropOff_ends_with?: Maybe<String>;
  dropOff_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  status?: Maybe<RideStatus>;
  status_not?: Maybe<RideStatus>;
  status_in?: Maybe<RideStatus[] | RideStatus>;
  status_not_in?: Maybe<RideStatus[] | RideStatus>;
  AND?: Maybe<RideScalarWhereInput[] | RideScalarWhereInput>;
  OR?: Maybe<RideScalarWhereInput[] | RideScalarWhereInput>;
  NOT?: Maybe<RideScalarWhereInput[] | RideScalarWhereInput>;
}

export interface RideUpdateManyWithWhereNestedInput {
  where: RideScalarWhereInput;
  data: RideUpdateManyDataInput;
}

export interface RideUpdateManyDataInput {
  riders?: Maybe<Int>;
  pickUp?: Maybe<String>;
  dropOff?: Maybe<String>;
  price?: Maybe<Int>;
  status?: Maybe<RideStatus>;
}

export interface UserUpdaterolesInput {
  set?: Maybe<Role[] | Role>;
}

export interface UserUpdateManyMutationInput {
  cell?: Maybe<String>;
  email?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  oneTimePin?: Maybe<String>;
  oneTimePinExpiry?: Maybe<DateTimeInput>;
  roles?: Maybe<UserUpdaterolesInput>;
}

export interface RideSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RideWhereInput>;
  AND?: Maybe<RideSubscriptionWhereInput[] | RideSubscriptionWhereInput>;
  OR?: Maybe<RideSubscriptionWhereInput[] | RideSubscriptionWhereInput>;
  NOT?: Maybe<RideSubscriptionWhereInput[] | RideSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Ride {
  id: ID_Output;
  riders: Int;
  pickUp: String;
  dropOff: String;
  price: Int;
  status: RideStatus;
}

export interface RidePromise extends Promise<Ride>, Fragmentable {
  id: () => Promise<ID_Output>;
  riders: () => Promise<Int>;
  pickUp: () => Promise<String>;
  dropOff: () => Promise<String>;
  price: () => Promise<Int>;
  status: () => Promise<RideStatus>;
}

export interface RideSubscription
  extends Promise<AsyncIterator<Ride>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  riders: () => Promise<AsyncIterator<Int>>;
  pickUp: () => Promise<AsyncIterator<String>>;
  dropOff: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<RideStatus>>;
}

export interface RideNullablePromise
  extends Promise<Ride | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  riders: () => Promise<Int>;
  pickUp: () => Promise<String>;
  dropOff: () => Promise<String>;
  price: () => Promise<Int>;
  status: () => Promise<RideStatus>;
}

export interface RideConnection {
  pageInfo: PageInfo;
  edges: RideEdge[];
}

export interface RideConnectionPromise
  extends Promise<RideConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RideEdge>>() => T;
  aggregate: <T = AggregateRidePromise>() => T;
}

export interface RideConnectionSubscription
  extends Promise<AsyncIterator<RideConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RideEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRideSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface RideEdge {
  node: Ride;
  cursor: String;
}

export interface RideEdgePromise extends Promise<RideEdge>, Fragmentable {
  node: <T = RidePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RideEdgeSubscription
  extends Promise<AsyncIterator<RideEdge>>,
    Fragmentable {
  node: <T = RideSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRide {
  count: Int;
}

export interface AggregateRidePromise
  extends Promise<AggregateRide>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRideSubscription
  extends Promise<AsyncIterator<AggregateRide>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  cell: String;
  email: String;
  image?: String;
  name: String;
  password: String;
  oneTimePin?: String;
  oneTimePinExpiry?: DateTimeOutput;
  roles: Role[];
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  cell: () => Promise<String>;
  email: () => Promise<String>;
  image: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  oneTimePin: () => Promise<String>;
  oneTimePinExpiry: () => Promise<DateTimeOutput>;
  rides: <T = FragmentableArray<Ride>>(args?: {
    where?: RideWhereInput;
    orderBy?: RideOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  roles: () => Promise<Role[]>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cell: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  oneTimePin: () => Promise<AsyncIterator<String>>;
  oneTimePinExpiry: () => Promise<AsyncIterator<DateTimeOutput>>;
  rides: <T = Promise<AsyncIterator<RideSubscription>>>(args?: {
    where?: RideWhereInput;
    orderBy?: RideOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  roles: () => Promise<AsyncIterator<Role[]>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cell: () => Promise<String>;
  email: () => Promise<String>;
  image: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  oneTimePin: () => Promise<String>;
  oneTimePinExpiry: () => Promise<DateTimeOutput>;
  rides: <T = FragmentableArray<Ride>>(args?: {
    where?: RideWhereInput;
    orderBy?: RideOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  roles: () => Promise<Role[]>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface RideSubscriptionPayload {
  mutation: MutationType;
  node: Ride;
  updatedFields: String[];
  previousValues: RidePreviousValues;
}

export interface RideSubscriptionPayloadPromise
  extends Promise<RideSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RidePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RidePreviousValuesPromise>() => T;
}

export interface RideSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RideSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RideSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RidePreviousValuesSubscription>() => T;
}

export interface RidePreviousValues {
  id: ID_Output;
  riders: Int;
  pickUp: String;
  dropOff: String;
  price: Int;
  status: RideStatus;
}

export interface RidePreviousValuesPromise
  extends Promise<RidePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  riders: () => Promise<Int>;
  pickUp: () => Promise<String>;
  dropOff: () => Promise<String>;
  price: () => Promise<Int>;
  status: () => Promise<RideStatus>;
}

export interface RidePreviousValuesSubscription
  extends Promise<AsyncIterator<RidePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  riders: () => Promise<AsyncIterator<Int>>;
  pickUp: () => Promise<AsyncIterator<String>>;
  dropOff: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<RideStatus>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  cell: String;
  email: String;
  image?: String;
  name: String;
  password: String;
  oneTimePin?: String;
  oneTimePinExpiry?: DateTimeOutput;
  roles: Role[];
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cell: () => Promise<String>;
  email: () => Promise<String>;
  image: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  oneTimePin: () => Promise<String>;
  oneTimePinExpiry: () => Promise<DateTimeOutput>;
  roles: () => Promise<Role[]>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cell: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  oneTimePin: () => Promise<AsyncIterator<String>>;
  oneTimePinExpiry: () => Promise<AsyncIterator<DateTimeOutput>>;
  roles: () => Promise<AsyncIterator<Role[]>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Ride",
    embedded: false
  },
  {
    name: "RideStatus",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://eu1.prisma.sh/celenkosini/ke-taxi-db/dev`
});
export const prisma = new Prisma();
